---
parameters: []
provision:
  os: "rhel"
  stage: "base"
  provider: "aws"
sync: []
actions:
  - type: "forward_parameters"
    parameters:
      - JOB_NAME
      - BUILD_NUMBER
  - type: "script"
    title: "use a ramdisk for etcd"
    timeout: 300
    script: |-
      sudo su root <<SUDO
      mkdir -p /tmp
      mount -t tmpfs -o size=4096m tmpfs /tmp
      mkdir -p /tmp/etcd
      chmod a+rwx /tmp/etcd
      restorecon -R /tmp
      echo "ETCD_DATA_DIR=/tmp/etcd" >> /etc/environment
      SUDO
  - type: "script"
    title: "turn off unnecessary CentOS PaaS SIG repos"
    timeout: 300
    script: |-
      sudo yum-config-manager --disable centos-paas-sig-openshift-origin\*-rpms

      if [[ "${JOB_NAME}" == *update* ]]; then
        branch="${PULL_BASE_REF:-"master"}"
        case "${branch}" in
          master )
            sudo yum-config-manager --enable centos-paas-sig-openshift-origin37-rpms
            ;;
          release-* )
            major="$( echo "${branch}" | grep -Po "(?<=release-)[0-9](?=\.[0-9])" )"
            minor="$( echo "${branch}" | grep -Po "(?<=release-[0-9]\.)[0-9]" )"
            previous="$(( minor - 1 ))"
            repo="centos-paas-sig-openshift-origin${major}${previous}-rpms"
            sudo yum-config-manager --enable "${repo}"
            ;;
          enterprise-* )
            major="$( echo "${branch}" | grep -Po "(?<=release-)[0-9](?=\.[0-9])" )"
            minor="$( echo "${branch}" | grep -Po "(?<=release-[0-9]\.)[0-9]" )"
            previous="$(( minor - 1 ))"
            repo="centos-paas-sig-openshift-origin${major}${previous}-rpms"
            sudo yum-config-manager --enable "${repo}"
            ;;
        esac
      fi
  - type: "script"
    title: "enable docker tested repo"
    timeout: 300
    script: |-
      sudo touch /etc/yum.repos.d/dockertested.repo
      sudo chmod a+rw /etc/yum.repos.d/dockertested.repo
      cat <<REPO >/etc/yum.repos.d/dockertested.repo
      [dockertested]
      name=dockertested
      baseurl=https://mirror.openshift.com/enterprise/rhel/dockertested/x86_64/os/
      enabled=1
      sslclientcert=/var/lib/yum/client-cert.pem
      sslclientkey=/var/lib/yum/client-key.pem
      sslverify=0
      REPO
post_actions:
  - type: "forward_parameters"
    parameters:
      - BUILD_URL
  - type: "script"
    title: "record the ending metadata"
    timeout: 300
    repository: "aos-cd-jobs"
    script: |-
      trap 'exit 0' EXIT
      sjb/gcs/finished.py
  - type: "host_script"
    title: "assemble GCS output"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      mkdir -p gcs/artifacts gcs/artifacts/generated gcs/artifacts/journals gcs/artifacts/gathered
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/data/finished.json gcs/
      cat "/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log" > gcs/build-log.txt
      cp artifacts/generated/* gcs/artifacts/generated/
      cp artifacts/journals/* gcs/artifacts/journals/
      cp -r artifacts/gathered/* gcs/artifacts/

      scp -F ./.config/origin-ci-tool/inventory/.ssh_config -r "$( pwd )/gcs" openshiftdevel:/data
      scp -F ./.config/origin-ci-tool/inventory/.ssh_config /var/lib/jenkins/.config/gcloud/gcs-publisher-credentials.json openshiftdevel:/data/credentials.json
  - type: "script"
    title: "push the artifacts and metadata"
    timeout: 300
    script: |-
      trap 'exit 0' EXIT
      if [[ -n "${JOB_SPEC:-}" ]]; then
        if [[ "$( jq --compact-output ".buildid" <<<"${JOB_SPEC}" )" =~ ^\"[0-9]+\"$ ]]; then
          echo "Keeping BUILD_ID"
        else
          echo "Using BUILD_NUMBER"
          JOB_SPEC="$( jq --compact-output ".buildid |= \"${BUILD_NUMBER}\"" <<<"${JOB_SPEC}" )"
        fi
        docker run -e JOB_SPEC="${JOB_SPEC}" -v "/data:/data:z" registry.svc.ci.openshift.org/ci/gcsupload:latest --dry-run=false --gcs-bucket=origin-ci-test --gcs-credentials-file=/data/credentials.json --path-strategy=single --default-org=openshift --default-repo=origin /data/gcs/
      fi
artifacts:
  - "/data/src/github.com/openshift/origin/_output/scripts"
generated_artifacts:
  installed_packages.log: 'sudo yum list installed'
  avc_denials.log: 'sudo ausearch -m AVC -m SELINUX_ERR -m USER_AVC'
  docker.info: 'sudo docker version && sudo docker info && sudo docker images && sudo docker ps -a'
  docker.config: 'sudo cat /etc/sysconfig/docker /etc/sysconfig/docker-network /etc/sysconfig/docker-storage /etc/sysconfig/docker-storage-setup /etc/systemd/system/docker.service'
  filesystem.info: 'sudo df -T -h && sudo pvs && sudo vgs && sudo lvs && sudo findmnt --all'
  pid1.journal: 'sudo journalctl _PID=1 --no-pager --all --lines=all'
  dmesg.log: 'sudo journalctl --dmesg --no-pager --all --lines=all'
  master-metrics.log: 'oc get --raw /metrics --config=/etc/origin/master/admin.kubeconfig'
  node-metrics.log: 'oc get --raw /metrics --server=https://\$( uname --nodename ):10250 --config=/etc/origin/master/admin.kubeconfig'
  containers.log: 'sudo find /var/lib/docker/containers -name *.log | sudo xargs tail -vn +1'
system_journals:
  - docker.service
  - dnsmasq.service
  - systemd-journald.service
